# vim: foldmethod=marker foldlevel=0
# ==============================================================================
#                                           _                  __      
#            _________  ____    _________  (_)___  ____  ___  / /______
#           / ___/ __ \/ __ \  / ___/ __ \/ / __ \/ __ \/ _ \/ __/ ___/
#          / /__/ /_/ / /_/ / (__  ) / / / / /_/ / /_/ /  __/ /_(__  ) 
#          \___/ .___/ .___(_)____/_/ /_/_/ .___/ .___/\___/\__/____/  
#             /_/   /_/                  /_/   /_/                     
#
# ==============================================================================

priority -1
extends c
priority 1

# FUNCTIONS --------------------------------------------------------------- {{{1

global !p
def get_ns_comment(t):
    return "// {}".format("anonymous namespace" if not t else f"namespace {t}")

def gen_template_list(matches, use_class):
  contents = ""
  matches = [m.strip().capitalize() for m in matches.split() if m]
  typename = "class" if use_class else "typename"
  for match in matches:
    if match.endswith("..."):
      match = match.rstrip("...")
      contents += f", {typename}... {match}"
    else:
      contents += f", {typename} {match}"
  return contents.lstrip(", ")
endglobal

# PREPROCESSOR ------------------------------------------------------------ {{{1

snippet inc "#include <>" bA
#include <${1:iostream}>$0
endsnippet

# TOP-LEVEL DECLS --------------------------------------------------------- {{{1

snippet ns "namespace foo {}" b
namespace${1/.+/ /}${1:foo} {
${0:${VISUAL}}
} `!p snip.rv = get_ns_comment(t[1])`
endsnippet

snippet uns "using namespace std;"
using namespace ${1:std};$0
endsnippet

priority 10
snippet e "Unscoped Enum" b
enum ${1:name} {
  ${2:ITEM,}
};$0
endsnippet

priority 20
snippet 'e (\w+)\s' "Unscoped Enum" brA
enum `!p snip.rv = match.group(1)` {
  ${1:ITEM,}
};$0
endsnippet

priority 10
snippet ec "Scoped Enum" b
enum class ${1:name} {
  ${2:ITEM,}
};$0
endsnippet

priority 20
snippet 'ec (\w+)\s' "Scoped Enum" brA
enum class `!p snip.rv = match.group(1)` {
  ${1:ITEM,}
};$0
endsnippet

priority 10
snippet s "Struct" b
struct ${1:name} {
  $2
};$0
endsnippet

priority 20
snippet 's (\w+)\s' "Struct" brA
struct `!p snip.rv = match.group(1)` {
  $2
};$0
endsnippet

priority 10
snippet c "Class" b
class ${1:name} {
public:
  ${2:$1() = default;}$3
};$0
endsnippet

priority 20
snippet 'c (\w+)\s' "Class" rbA
class `!p snip.rv = match.group(1)` {
public:
  ${2:`!p snip.rv = match.group(1)`() = default;}$3
};$0
endsnippet

priority 10
snippet t "Template" b
template <typename ${1:T}>$0
endsnippet

priority 20
snippet 't(!)? ((\s*\S+)*)' "Template" br
template <`!p snip.rv = gen_template_list(match.group(2), match.group(1))`>
endsnippet

# FUNCTIONS & METHODS ----------------------------------------------------- {{{1

priority 10
snippet f "Function" b
${3:void} ${1:name}(${2:/*params*/}) {
  ${4:${VISUAL:return;}}
}
endsnippet

priority 20
snippet 'f (\w+)\s' "Function" brA
${2:int} `!p snip.rv = match.group(1)`(${1:/*params*/}) {
  ${4:${VISUAL:return;}}
}
endsnippet

snippet l "Lambda Function" w
[${1:&}](${2:/*params*/}) {
  ${3:${VISUAL:return;}}
}
endsnippet

# STATEMENTS -------------------------------------------------------------- {{{1

priority 10
snippet 'fore( c:)?' "Range For Loop" rb
for (`!p snip.rv = "const " if match.group(1) else ""`auto &${1:item} : ${2:container}) {
  ${0:${VISUAL:;}}
}
endsnippet

priority 20
snippet 'fore ((c):)?(\w+):(\w+)\s' "Range For Loop" rbA
for (`!p snip.rv = "const " if match.group(2) else ""`auto &`!p snip.rv = match.group(3)` : `!p snip.rv = match.group(4)`) {
  ${1:${VISUAL:;}}
}$0
endsnippet

# TYPES & VARIABLES ------------------------------------------------------- {{{1

snippet cout "std::cout << std::endl;" b
std::cout << ${1:"Hello, World!"} << std::endl;$0
endsnippet

snippet cerr "std::cerr << std::endl;" b
std::cerr << ${1:"Hello, World!"} << std::endl;$0
endsnippet

snippet mu "std::make_unique<>()" w
std::make_unique<${1:T}>(${2:${VISUAL}});$0
endsnippet

snippet ms "std::make_shared<>()" w
std::make_shared<${1:T}>(${2:${VISUAL}});$0
endsnippet

snippet up "std::unique_ptr<T> up;" w
std::unique_ptr<${1:T}>
endsnippet

snippet sp "std::shared_ptr<T> up;" w
std::shared_ptr<${1:T}>
endsnippet

snippet vec "std::vector<T> vec;" i
std::vector<${1:T}>
endsnippet

snippet map "std::map<K, V> map;" w
std::map<${1:K}, ${2:V}>
endsnippet

snippet umap "std::unordered_map<K, V> map;" w
std::unordered_map<${1:K}, ${2:V}>
endsnippet

snippet str "std::string" w
std::string
endsnippet
