# vim: foldmethod=marker foldlevel=0
# ==============================================================================
#                         __                   _                  __      
#         _______  ______/ /___ _  _________  (_)___  ____  ___  / /______
#        / ___/ / / / __  / __ `/ / ___/ __ \/ / __ \/ __ \/ _ \/ __/ ___/
#       / /__/ /_/ / /_/ / /_/ / (__  ) / / / / /_/ / /_/ /  __/ /_(__  ) 
#       \___/\__,_/\__,_/\__,_(_)____/_/ /_/_/ .___/ .___/\___/\__/____/  
#                                           /_/   /_/                     
#
# ==============================================================================

extends cpp
priority 30

# TOP-LEVEL DECLS --------------------------------------------------------- {{{1

snippet kd "Kernel Definition" b
__global__ void ${1:name}($2) {
    ${3:${VISUAL:return;}}
}
endsnippet

snippet 'kd (\w+)\s' "Kernel Definition" brA
__global__ void `!p snip.rv = match.group(1)`($2) {
    ${3:${VISUAL:return;}}
}
endsnippet

snippet ki "Kernel Invocation" w
${1:name}<<<${2:1, 1}>>>($3);
endsnippet

snippet 'ki (\w+)\s' "Kernel Invocation" wrA
`!p snip.rv = match.group(1)`<<<${1:1, 1}>>>($2);$0
endsnippet

# MEMORY FUNCTIONS -------------------------------------------------------- {{{1

snippet m "cudaMalloc();"
cudaMalloc(${1:&ptr}, ${2:size});
endsnippet

snippet f "cudaFree();"
cudaFree(${1:ptr});
endsnippet

snippet mm "cudaMallocManaged();"
cudaMallocManaged(${1:&ptr}, ${2:size});
endsnippet

snippet mh "cudaMallocHost();"
cudaMallocHost(${1:&ptr}, ${2:size});
endsnippet

snippet fh "cudaFreeHost();"
cudaFreeHost(${1:ptr});
endsnippet

snippet cpy "cudaMemcpy();"
cudaMemcpy(${1:dest}, ${2:src}, ${3:size}, cudaMemcpy${4:Default});
endsnippet

# DEVICE FUNCTIONS -------------------------------------------------------- {{{1

snippet dg "cudaGetDevice();"
cudaGetDevice(${1:&dev});
endsnippet

snippet dse "cudaSetDevice();"
cudaSetDevice(${1:dev});
endsnippet

snippet dc "cudaGetDeviceCount();"
cudaGetDeviceCount(${1:&count});
endsnippet

snippet dsy "cudaDeviceSynchronize();"
cudaDeviceSynchronize();
endsnippet

# STREAM FUNCTIONS -------------------------------------------------------- {{{1

snippet stc "cudaStreamCreate();"
cudaStreamCreate(${1:&stream});
endsnippet

snippet std "cudaStreamDestroy();"
cudaStreamCreate(${1:stream});
endsnippet

snippet sts "cudaStreamSynchronize();"
cudaStreamSynchronize(${1:stream});
endsnippet

snippet stw "cudaStreamWaitEvent();"
cudaStreamWaitEvent(${1:stream}, ${2:event});
endsnippet

# EVENT  FUNCTIONS -------------------------------------------------------- {{{1

snippet evc "cudaEventCreate();"
cudaEventCreate(${1:&event});
endsnippet

snippet evd "cudaEventDestroy();"
cudaEventDestroy(${1:event});
endsnippet

snippet eve "cudaEventElapsedTime();"
cudaEventElapsedTime(${1:&ms}, ${2:start}, ${3:end});
endsnippet

snippet evr "cudaEventRecord();"
cudaEventRecord(${1:event}, ${2:stream});
endsnippet

snippet evs "cudaEventSynchronize();"
cudaEventSynchronize(${1:event});
endsnippet
